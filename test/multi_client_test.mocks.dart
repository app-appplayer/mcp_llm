// Mocks generated by Mockito 5.4.5 from annotations
// in mcp_llm/test/multi_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mcp_llm/mcp_llm.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLlmInterface_0 extends _i1.SmartFake implements _i2.LlmInterface {
  _FakeLlmInterface_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePluginManager_1 extends _i1.SmartFake implements _i2.PluginManager {
  _FakePluginManager_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeChatSession_2 extends _i1.SmartFake implements _i2.ChatSession {
  _FakeChatSession_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLlmResponse_3 extends _i1.SmartFake implements _i2.LlmResponse {
  _FakeLlmResponse_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LlmClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmClient extends _i1.Mock implements _i2.LlmClient {
  MockLlmClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LlmInterface get llmProvider =>
      (super.noSuchMethod(
            Invocation.getter(#llmProvider),
            returnValue: _FakeLlmInterface_0(
              this,
              Invocation.getter(#llmProvider),
            ),
          )
          as _i2.LlmInterface);

  @override
  _i2.PluginManager get pluginManager =>
      (super.noSuchMethod(
            Invocation.getter(#pluginManager),
            returnValue: _FakePluginManager_1(
              this,
              Invocation.getter(#pluginManager),
            ),
          )
          as _i2.PluginManager);

  @override
  _i2.ChatSession get chatSession =>
      (super.noSuchMethod(
            Invocation.getter(#chatSession),
            returnValue: _FakeChatSession_2(
              this,
              Invocation.getter(#chatSession),
            ),
          )
          as _i2.ChatSession);

  @override
  set chatSession(_i2.ChatSession? _chatSession) => super.noSuchMethod(
    Invocation.setter(#chatSession, _chatSession),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasMcpClient =>
      (super.noSuchMethod(Invocation.getter(#hasMcpClient), returnValue: false)
          as bool);

  @override
  _i3.Future<_i2.LlmResponse> chat(
    String? userInput, {
    bool? enableTools = true,
    bool? enablePlugins = true,
    Map<String, dynamic>? parameters = const {},
    _i2.LlmContext? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #chat,
              [userInput],
              {
                #enableTools: enableTools,
                #enablePlugins: enablePlugins,
                #parameters: parameters,
                #context: context,
              },
            ),
            returnValue: _i3.Future<_i2.LlmResponse>.value(
              _FakeLlmResponse_3(
                this,
                Invocation.method(
                  #chat,
                  [userInput],
                  {
                    #enableTools: enableTools,
                    #enablePlugins: enablePlugins,
                    #parameters: parameters,
                    #context: context,
                  },
                ),
              ),
            ),
          )
          as _i3.Future<_i2.LlmResponse>);

  @override
  _i3.Stream<_i2.LlmResponseChunk> streamChat(
    String? userInput, {
    bool? enableTools = true,
    bool? enablePlugins = true,
    Map<String, dynamic>? parameters = const {},
    _i2.LlmContext? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #streamChat,
              [userInput],
              {
                #enableTools: enableTools,
                #enablePlugins: enablePlugins,
                #parameters: parameters,
                #context: context,
              },
            ),
            returnValue: _i3.Stream<_i2.LlmResponseChunk>.empty(),
          )
          as _i3.Stream<_i2.LlmResponseChunk>);

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
