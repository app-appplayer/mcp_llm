// Mocks generated by Mockito 5.4.5 from annotations
// in mcp_llm/test/multi_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mcp_llm/mcp_llm.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLlmInterface_0 extends _i1.SmartFake implements _i2.LlmInterface {
  _FakeLlmInterface_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePluginManager_1 extends _i1.SmartFake implements _i2.PluginManager {
  _FakePluginManager_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeChatSession_2 extends _i1.SmartFake implements _i2.ChatSession {
  _FakeChatSession_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLlmResponse_3 extends _i1.SmartFake implements _i2.LlmResponse {
  _FakeLlmResponse_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LlmClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmClient extends _i1.Mock implements _i2.LlmClient {
  MockLlmClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LlmInterface get llmProvider =>
      (super.noSuchMethod(
            Invocation.getter(#llmProvider),
            returnValue: _FakeLlmInterface_0(
              this,
              Invocation.getter(#llmProvider),
            ),
          )
          as _i2.LlmInterface);

  @override
  _i2.PluginManager get pluginManager =>
      (super.noSuchMethod(
            Invocation.getter(#pluginManager),
            returnValue: _FakePluginManager_1(
              this,
              Invocation.getter(#pluginManager),
            ),
          )
          as _i2.PluginManager);

  @override
  _i2.ChatSession get chatSession =>
      (super.noSuchMethod(
            Invocation.getter(#chatSession),
            returnValue: _FakeChatSession_2(
              this,
              Invocation.getter(#chatSession),
            ),
          )
          as _i2.ChatSession);

  @override
  set chatSession(_i2.ChatSession? _chatSession) => super.noSuchMethod(
    Invocation.setter(#chatSession, _chatSession),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasMcpClientManager =>
      (super.noSuchMethod(
            Invocation.getter(#hasMcpClientManager),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasRetrievalCapabilities =>
      (super.noSuchMethod(
            Invocation.getter(#hasRetrievalCapabilities),
            returnValue: false,
          )
          as bool);

  @override
  void addMcpClient(String? clientId, dynamic mcpClient) => super.noSuchMethod(
    Invocation.method(#addMcpClient, [clientId, mcpClient]),
    returnValueForMissingStub: null,
  );

  @override
  void removeMcpClient(String? clientId) => super.noSuchMethod(
    Invocation.method(#removeMcpClient, [clientId]),
    returnValueForMissingStub: null,
  );

  @override
  void setDefaultMcpClient(String? clientId) => super.noSuchMethod(
    Invocation.method(#setDefaultMcpClient, [clientId]),
    returnValueForMissingStub: null,
  );

  @override
  List<String> getMcpClientIds() =>
      (super.noSuchMethod(
            Invocation.method(#getMcpClientIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  void setSystemPrompt(String? systemPrompt) => super.noSuchMethod(
    Invocation.method(#setSystemPrompt, [systemPrompt]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<String> createEnhancedSystemPrompt({
    String? basePrompt,
    bool? includeTools = true,
    bool? includePrompts = true,
    bool? includeResources = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createEnhancedSystemPrompt, [], {
              #basePrompt: basePrompt,
              #includeTools: includeTools,
              #includePrompts: includePrompts,
              #includeResources: includeResources,
            }),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#createEnhancedSystemPrompt, [], {
                  #basePrompt: basePrompt,
                  #includeTools: includeTools,
                  #includePrompts: includePrompts,
                  #includeResources: includeResources,
                }),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<Map<String, dynamic>> executePrompt(
    String? promptName,
    Map<String, dynamic>? args, {
    String? clientId,
    bool? tryAllClients = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #executePrompt,
              [promptName, args],
              {#clientId: clientId, #tryAllClients: tryAllClients},
            ),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> readResource(
    String? resourceUri, {
    String? clientId,
    bool? tryAllClients = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #readResource,
              [resourceUri],
              {#clientId: clientId, #tryAllClients: tryAllClients},
            ),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> updateSystemPrompt({
    String? basePrompt,
    bool? includeTools = true,
    bool? includePrompts = true,
    bool? includeResources = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateSystemPrompt, [], {
              #basePrompt: basePrompt,
              #includeTools: includeTools,
              #includePrompts: includePrompts,
              #includeResources: includeResources,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i2.LlmResponse> chat(
    String? userInput, {
    bool? enableTools = true,
    bool? enablePlugins = true,
    Map<String, dynamic>? parameters = const {},
    _i2.LlmContext? context,
    bool? useRetrieval = false,
    bool? enhanceSystemPrompt = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #chat,
              [userInput],
              {
                #enableTools: enableTools,
                #enablePlugins: enablePlugins,
                #parameters: parameters,
                #context: context,
                #useRetrieval: useRetrieval,
                #enhanceSystemPrompt: enhanceSystemPrompt,
              },
            ),
            returnValue: _i3.Future<_i2.LlmResponse>.value(
              _FakeLlmResponse_3(
                this,
                Invocation.method(
                  #chat,
                  [userInput],
                  {
                    #enableTools: enableTools,
                    #enablePlugins: enablePlugins,
                    #parameters: parameters,
                    #context: context,
                    #useRetrieval: useRetrieval,
                    #enhanceSystemPrompt: enhanceSystemPrompt,
                  },
                ),
              ),
            ),
          )
          as _i3.Future<_i2.LlmResponse>);

  @override
  _i3.Future<dynamic> executeToolWithSpecificClient(
    String? toolName,
    Map<String, dynamic>? args,
    String? clientId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeToolWithSpecificClient, [
              toolName,
              args,
              clientId,
            ]),
            returnValue: _i3.Future<dynamic>.value(),
          )
          as _i3.Future<dynamic>);

  @override
  _i3.Future<Map<String, dynamic>> executeToolOnAllMcpClients(
    String? toolName,
    Map<String, dynamic>? args,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeToolOnAllMcpClients, [toolName, args]),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<List<String>> findMcpClientsWithTool(String? toolName) =>
      (super.noSuchMethod(
            Invocation.method(#findMcpClientsWithTool, [toolName]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  void setDefaultToolClient(String? clientId) => super.noSuchMethod(
    Invocation.method(#setDefaultToolClient, [clientId]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<Map<String, List<Map<String, dynamic>>>> getToolsByClient() =>
      (super.noSuchMethod(
            Invocation.method(#getToolsByClient, []),
            returnValue:
                _i3.Future<Map<String, List<Map<String, dynamic>>>>.value(
                  <String, List<Map<String, dynamic>>>{},
                ),
          )
          as _i3.Future<Map<String, List<Map<String, dynamic>>>>);

  @override
  _i3.Stream<_i2.LlmResponseChunk> streamChat(
    String? userInput, {
    bool? enableTools = true,
    bool? enablePlugins = true,
    Map<String, dynamic>? parameters = const {},
    _i2.LlmContext? context,
    bool? useRetrieval = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #streamChat,
              [userInput],
              {
                #enableTools: enableTools,
                #enablePlugins: enablePlugins,
                #parameters: parameters,
                #context: context,
                #useRetrieval: useRetrieval,
              },
            ),
            returnValue: _i3.Stream<_i2.LlmResponseChunk>.empty(),
          )
          as _i3.Stream<_i2.LlmResponseChunk>);

  @override
  _i3.Future<List<_i2.Document>> retrieveRelevantDocuments(
    String? query, {
    int? topK = 5,
    double? minimumScore,
    String? namespace,
    Map<String, dynamic>? filters = const {},
    bool? useCache = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #retrieveRelevantDocuments,
              [query],
              {
                #topK: topK,
                #minimumScore: minimumScore,
                #namespace: namespace,
                #filters: filters,
                #useCache: useCache,
              },
            ),
            returnValue: _i3.Future<List<_i2.Document>>.value(<_i2.Document>[]),
          )
          as _i3.Future<List<_i2.Document>>);

  @override
  _i3.Future<String> addDocument(_i2.Document? document) =>
      (super.noSuchMethod(
            Invocation.method(#addDocument, [document]),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#addDocument, [document]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<List<String>> addDocuments(List<_i2.Document>? documents) =>
      (super.noSuchMethod(
            Invocation.method(#addDocuments, [documents]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<List<double>> generateEmbeddings(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#generateEmbeddings, [text]),
            returnValue: _i3.Future<List<double>>.value(<double>[]),
          )
          as _i3.Future<List<double>>);

  @override
  _i3.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
