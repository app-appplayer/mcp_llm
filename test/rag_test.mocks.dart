// Mocks generated by Mockito 5.4.5 from annotations
// in mcp_llm/test/rag_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mcp_llm/mcp_llm.dart' as _i3;
import 'package:mcp_llm/src/storage/storage_manager.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStorageManager_0 extends _i1.SmartFake
    implements _i2.StorageManager {
  _FakeStorageManager_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLlmResponse_1 extends _i1.SmartFake implements _i3.LlmResponse {
  _FakeLlmResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DocumentStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentStore extends _i1.Mock implements _i3.DocumentStore {
  MockDocumentStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StorageManager get storageManager =>
      (super.noSuchMethod(
            Invocation.getter(#storageManager),
            returnValue: _FakeStorageManager_0(
              this,
              Invocation.getter(#storageManager),
            ),
          )
          as _i2.StorageManager);

  @override
  int get documentCount =>
      (super.noSuchMethod(Invocation.getter(#documentCount), returnValue: 0)
          as int);

  @override
  int get collectionCount =>
      (super.noSuchMethod(Invocation.getter(#collectionCount), returnValue: 0)
          as int);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String> addDocument(_i3.Document? document) =>
      (super.noSuchMethod(
            Invocation.method(#addDocument, [document]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#addDocument, [document]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i3.Document? getDocument(String? id) =>
      (super.noSuchMethod(Invocation.method(#getDocument, [id]))
          as _i3.Document?);

  @override
  _i4.Future<void> updateDocument(_i3.Document? document) =>
      (super.noSuchMethod(
            Invocation.method(#updateDocument, [document]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> deleteDocument(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocument, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<String> createCollection(_i3.DocumentCollection? collection) =>
      (super.noSuchMethod(
            Invocation.method(#createCollection, [collection]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createCollection, [collection]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i3.DocumentCollection? getCollection(String? id) =>
      (super.noSuchMethod(Invocation.method(#getCollection, [id]))
          as _i3.DocumentCollection?);

  @override
  _i4.Future<bool> deleteCollection(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCollection, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i3.Document>> findSimilar(
    List<double>? queryEmbedding, {
    int? limit = 5,
    double? minimumScore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #findSimilar,
              [queryEmbedding],
              {#limit: limit, #minimumScore: minimumScore},
            ),
            returnValue: _i4.Future<List<_i3.Document>>.value(<_i3.Document>[]),
          )
          as _i4.Future<List<_i3.Document>>);

  @override
  _i4.Future<List<_i3.Document>> findSimilarInCollection(
    String? collectionId,
    List<double>? queryEmbedding, {
    int? limit = 5,
    double? minimumScore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #findSimilarInCollection,
              [collectionId, queryEmbedding],
              {#limit: limit, #minimumScore: minimumScore},
            ),
            returnValue: _i4.Future<List<_i3.Document>>.value(<_i3.Document>[]),
          )
          as _i4.Future<List<_i3.Document>>);

  @override
  List<_i3.Document> getDocumentsInCollection(String? collectionId) =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentsInCollection, [collectionId]),
            returnValue: <_i3.Document>[],
          )
          as List<_i3.Document>);

  @override
  _i4.Future<int> deleteDocumentsInCollection(String? collectionId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocumentsInCollection, [collectionId]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  List<_i3.Document> searchByContent(String? query, {int? limit = 5}) =>
      (super.noSuchMethod(
            Invocation.method(#searchByContent, [query], {#limit: limit}),
            returnValue: <_i3.Document>[],
          )
          as List<_i3.Document>);
}

/// A class which mocks [LlmInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmInterface extends _i1.Mock implements _i3.LlmInterface {
  MockLlmInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.LlmResponse> complete(_i3.LlmRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#complete, [request]),
            returnValue: _i4.Future<_i3.LlmResponse>.value(
              _FakeLlmResponse_1(this, Invocation.method(#complete, [request])),
            ),
          )
          as _i4.Future<_i3.LlmResponse>);

  @override
  _i4.Stream<_i3.LlmResponseChunk> streamComplete(_i3.LlmRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#streamComplete, [request]),
            returnValue: _i4.Stream<_i3.LlmResponseChunk>.empty(),
          )
          as _i4.Stream<_i3.LlmResponseChunk>);

  @override
  _i4.Future<List<double>> getEmbeddings(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#getEmbeddings, [text]),
            returnValue: _i4.Future<List<double>>.value(<double>[]),
          )
          as _i4.Future<List<double>>);

  @override
  _i4.Future<void> initialize(_i3.LlmConfiguration? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  bool hasToolCallMetadata(Map<String, dynamic>? metadata) =>
      (super.noSuchMethod(
            Invocation.method(#hasToolCallMetadata, [metadata]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.LlmToolCall? extractToolCallFromMetadata(
    Map<String, dynamic>? metadata,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#extractToolCallFromMetadata, [metadata]),
          )
          as _i3.LlmToolCall?);

  @override
  Map<String, dynamic> standardizeMetadata(Map<String, dynamic>? metadata) =>
      (super.noSuchMethod(
            Invocation.method(#standardizeMetadata, [metadata]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [LlmResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmResponse extends _i1.Mock implements _i3.LlmResponse {
  MockLlmResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get text =>
      (super.noSuchMethod(
            Invocation.getter(#text),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#text)),
          )
          as String);

  @override
  Map<String, dynamic> get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
