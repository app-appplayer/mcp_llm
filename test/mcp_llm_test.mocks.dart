// Mocks generated by Mockito 5.4.5 from annotations
// in mcp_llm/test/mcp_llm_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mcp_llm/src/chat/message.dart' as _i7;
import 'package:mcp_llm/src/core/llm_context.dart' as _i8;
import 'package:mcp_llm/src/core/llm_interface.dart' as _i2;
import 'package:mcp_llm/src/core/models.dart' as _i3;
import 'package:mcp_llm/src/providers/provider.dart' as _i4;
import 'package:mcp_llm/src/storage/storage_manager.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLlmInterface_0 extends _i1.SmartFake implements _i2.LlmInterface {
  _FakeLlmInterface_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLlmResponse_1 extends _i1.SmartFake implements _i3.LlmResponse {
  _FakeLlmResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLlmRequest_2 extends _i1.SmartFake implements _i3.LlmRequest {
  _FakeLlmRequest_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LlmProviderFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmProviderFactory extends _i1.Mock
    implements _i4.LlmProviderFactory {
  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  Set<_i3.LlmCapability> get capabilities =>
      (super.noSuchMethod(
            Invocation.getter(#capabilities),
            returnValue: <_i3.LlmCapability>{},
            returnValueForMissingStub: <_i3.LlmCapability>{},
          )
          as Set<_i3.LlmCapability>);

  @override
  _i2.LlmInterface createProvider(_i3.LlmConfiguration? config) =>
      (super.noSuchMethod(
            Invocation.method(#createProvider, [config]),
            returnValue: _FakeLlmInterface_0(
              this,
              Invocation.method(#createProvider, [config]),
            ),
            returnValueForMissingStub: _FakeLlmInterface_0(
              this,
              Invocation.method(#createProvider, [config]),
            ),
          )
          as _i2.LlmInterface);
}

/// A class which mocks [LlmInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmInterface extends _i1.Mock implements _i2.LlmInterface {
  @override
  _i6.Future<_i3.LlmResponse> complete(_i3.LlmRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#complete, [request]),
            returnValue: _i6.Future<_i3.LlmResponse>.value(
              _FakeLlmResponse_1(this, Invocation.method(#complete, [request])),
            ),
            returnValueForMissingStub: _i6.Future<_i3.LlmResponse>.value(
              _FakeLlmResponse_1(this, Invocation.method(#complete, [request])),
            ),
          )
          as _i6.Future<_i3.LlmResponse>);

  @override
  _i6.Stream<_i3.LlmResponseChunk> streamComplete(_i3.LlmRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#streamComplete, [request]),
            returnValue: _i6.Stream<_i3.LlmResponseChunk>.empty(),
            returnValueForMissingStub: _i6.Stream<_i3.LlmResponseChunk>.empty(),
          )
          as _i6.Stream<_i3.LlmResponseChunk>);

  @override
  _i6.Future<List<double>> getEmbeddings(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#getEmbeddings, [text]),
            returnValue: _i6.Future<List<double>>.value(<double>[]),
            returnValueForMissingStub: _i6.Future<List<double>>.value(
              <double>[],
            ),
          )
          as _i6.Future<List<double>>);

  @override
  _i6.Future<void> initialize(_i3.LlmConfiguration? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [LlmRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmRequest extends _i1.Mock implements _i3.LlmRequest {
  @override
  String get prompt =>
      (super.noSuchMethod(
            Invocation.getter(#prompt),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#prompt),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#prompt),
            ),
          )
          as String);

  @override
  List<_i7.LlmMessage> get history =>
      (super.noSuchMethod(
            Invocation.getter(#history),
            returnValue: <_i7.LlmMessage>[],
            returnValueForMissingStub: <_i7.LlmMessage>[],
          )
          as List<_i7.LlmMessage>);

  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(
            Invocation.getter(#parameters),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.LlmRequest copyWith({
    String? prompt,
    List<_i7.LlmMessage>? history,
    Map<String, dynamic>? parameters,
    _i8.LlmContext? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #prompt: prompt,
              #history: history,
              #parameters: parameters,
              #context: context,
            }),
            returnValue: _FakeLlmRequest_2(
              this,
              Invocation.method(#copyWith, [], {
                #prompt: prompt,
                #history: history,
                #parameters: parameters,
                #context: context,
              }),
            ),
            returnValueForMissingStub: _FakeLlmRequest_2(
              this,
              Invocation.method(#copyWith, [], {
                #prompt: prompt,
                #history: history,
                #parameters: parameters,
                #context: context,
              }),
            ),
          )
          as _i3.LlmRequest);

  @override
  _i3.LlmRequest withSystemInstruction(String? instruction) =>
      (super.noSuchMethod(
            Invocation.method(#withSystemInstruction, [instruction]),
            returnValue: _FakeLlmRequest_2(
              this,
              Invocation.method(#withSystemInstruction, [instruction]),
            ),
            returnValueForMissingStub: _FakeLlmRequest_2(
              this,
              Invocation.method(#withSystemInstruction, [instruction]),
            ),
          )
          as _i3.LlmRequest);

  @override
  _i3.LlmRequest withMaxTokens(int? maxTokens) =>
      (super.noSuchMethod(
            Invocation.method(#withMaxTokens, [maxTokens]),
            returnValue: _FakeLlmRequest_2(
              this,
              Invocation.method(#withMaxTokens, [maxTokens]),
            ),
            returnValueForMissingStub: _FakeLlmRequest_2(
              this,
              Invocation.method(#withMaxTokens, [maxTokens]),
            ),
          )
          as _i3.LlmRequest);

  @override
  _i3.LlmRequest withTemperature(double? temperature) =>
      (super.noSuchMethod(
            Invocation.method(#withTemperature, [temperature]),
            returnValue: _FakeLlmRequest_2(
              this,
              Invocation.method(#withTemperature, [temperature]),
            ),
            returnValueForMissingStub: _FakeLlmRequest_2(
              this,
              Invocation.method(#withTemperature, [temperature]),
            ),
          )
          as _i3.LlmRequest);

  @override
  _i3.LlmRequest withMessage(_i7.LlmMessage? message) =>
      (super.noSuchMethod(
            Invocation.method(#withMessage, [message]),
            returnValue: _FakeLlmRequest_2(
              this,
              Invocation.method(#withMessage, [message]),
            ),
            returnValueForMissingStub: _FakeLlmRequest_2(
              this,
              Invocation.method(#withMessage, [message]),
            ),
          )
          as _i3.LlmRequest);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [LlmResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmResponse extends _i1.Mock implements _i3.LlmResponse {
  @override
  String get text =>
      (super.noSuchMethod(
            Invocation.getter(#text),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#text)),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#text),
            ),
          )
          as String);

  @override
  Map<String, dynamic> get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [StorageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageManager extends _i1.Mock implements _i9.StorageManager {
  @override
  _i6.Future<void> saveString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#saveString, [key, value]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String?> loadString(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#loadString, [key]),
            returnValue: _i6.Future<String?>.value(),
            returnValueForMissingStub: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<void> saveData(String? key, List<int>? data) =>
      (super.noSuchMethod(
            Invocation.method(#saveData, [key, data]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<int>?> loadData(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#loadData, [key]),
            returnValue: _i6.Future<List<int>?>.value(),
            returnValueForMissingStub: _i6.Future<List<int>?>.value(),
          )
          as _i6.Future<List<int>?>);

  @override
  _i6.Future<void> saveObject(String? key, Map<String, dynamic>? object) =>
      (super.noSuchMethod(
            Invocation.method(#saveObject, [key, object]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, dynamic>?> loadObject(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#loadObject, [key]),
            returnValue: _i6.Future<Map<String, dynamic>?>.value(),
            returnValueForMissingStub:
                _i6.Future<Map<String, dynamic>?>.value(),
          )
          as _i6.Future<Map<String, dynamic>?>);

  @override
  _i6.Future<bool> exists(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [key]),
            returnValue: _i6.Future<bool>.value(false),
            returnValueForMissingStub: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> delete(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [key]),
            returnValue: _i6.Future<bool>.value(false),
            returnValueForMissingStub: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<String>> listKeys([String? prefix]) =>
      (super.noSuchMethod(
            Invocation.method(#listKeys, [prefix]),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
            returnValueForMissingStub: _i6.Future<List<String>>.value(
              <String>[],
            ),
          )
          as _i6.Future<List<String>>);
}
